package com.capgemini.hotelmanagementsystem.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.capgemini.hotelmanagementsystem.bean.EmployeeInformationBean;
import com.capgemini.hotelmanagementsystem.bean.HotelInformationBean;
import com.capgemini.hotelmanagementsystem.bean.RoomInformationBean;
import com.capgemini.hotelmanagementsystem.dao.AdminOperationDao;
import com.capgemini.hotelmanagementsystem.exception.HotelManagementSystemException;
import com.capgemini.hotelmanagementsystem.validation.HotelValidation;

@Service
public class AdminOperationServiceImpl implements AdminOperationService {

	@Autowired
	private AdminOperationDao adminOperationsDao;

	@Autowired
	private HotelValidation hotelValidation;

	@Override
	public HotelInformationBean addHotel(HotelInformationBean hotelInformationBean) {
		String hotelName = hotelInformationBean.getHotelName();
		String hotelContactNumber = hotelInformationBean.getHotelContactNumber();
		String hotelLicenseNumber = hotelInformationBean.getLicenceNumber();
		if (hotelName.isEmpty() || hotelContactNumber.isEmpty() || hotelLicenseNumber.isEmpty()
				|| hotelInformationBean.getHotelAddress().isEmpty()
				|| hotelInformationBean.getHotelImageURL().isEmpty()) {
			throw new HotelManagementSystemException("Some Empty value is passed");
		} else {
			if (hotelValidation.nameValidation(hotelName)) {
				if (hotelValidation.contactNumberValidation(hotelContactNumber)) {
					if (hotelValidation.licenseValidation(hotelLicenseNumber)) {
						return adminOperationsDao.addHotel(hotelInformationBean);
					} else {
						throw new HotelManagementSystemException(
								"Liscence Number must begin with H and must have 8 integer");
					} // End of else for licenseValidation()
				} else {
					throw new HotelManagementSystemException(
							"Contact Number first Integer must be between [7-9] and rest as follow");
				} // End of else for contactNumberValidation()
			} else {
				throw new HotelManagementSystemException("Hotel Name must be in xyz abc fromat");
			} // End of else for nameValidation()
		} // End of if for avoiding null
	}

	@Override
	public List<HotelInformationBean> getHotelList() {
		return adminOperationsDao.getHotelList();
	}

	@Override
	public boolean updateHotelInformation(HotelInformationBean hotelBean) {
		if (hotelValidation.licenseValidation(hotelBean.getLicenceNumber())
				&& hotelValidation.contactNumberValidation(hotelBean.getHotelContactNumber())) {
			return adminOperationsDao.updateHotelInformation(hotelBean);
		}
		return false;
	}

	@Override
	public boolean deleteHotelInformation(int hotelId) {
		return adminOperationsDao.deleteHotelInformation(hotelId);
	}

	@Override
	public RoomInformationBean addRoom(RoomInformationBean roomBean) {
		return adminOperationsDao.addRoom(roomBean);
	}

	@Override
	public boolean deleteRoomInformation(int roomId) {
		return adminOperationsDao.deleteRoomInformation(roomId);
	}

	@Override
	public List<RoomInformationBean> getRoomList() {
		return adminOperationsDao.getRoomList();
	}

	@Override
	public boolean updateRoomInformation(RoomInformationBean roomBean) {
		if (hotelValidation.licenseValidation(roomBean.getLicenceNumber())) {
			return adminOperationsDao.updateRoomInformation(roomBean);
		}
		return false;
	}

	@Override
	public EmployeeInformationBean addEmployee(EmployeeInformationBean employeeBean) {
		
			System.out.println("...........2..........");
			return adminOperationsDao.addEmployee(employeeBean);
		
	}

	@Override
	public List<EmployeeInformationBean> getEmployeeList() {
		return adminOperationsDao.getEmployeeList();
	}

	@Override
	public boolean deleteEmployeeInformation(int employeeId) {
		return adminOperationsDao.deleteEmployeeInformation(employeeId);
	}

	@Override
	public boolean updateEmployeeInformation(EmployeeInformationBean employeeBean) {
		
			return adminOperationsDao.updateEmployeeInformation(employeeBean);
	
	}

	@Override
	public boolean licenseNumberPresent(String licenseNumber) {
		
		return adminOperationsDao.licenseNumberPresent(licenseNumber);
	}
}// end of class
